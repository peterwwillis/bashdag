bashdag v0.2

Usage: ./bashdag [OPTIONS] [NODE ..]

  Based on a config file, create a Directed Acyclic Graph and do stuff with it.
  Primarily used to execute programs according to the DAG sequence.

  Pass a NODE to begin walking the DAG starting at NODE. If no NODE is specified,
  the root nodes will be used (nodes that are depended on but themselves have no
  dependencies).

  Config file is a Bash script that gets eval'd into the main script. You can use
  functions to create and modify the DAG, create the DAG programmatically using 
  Bash scripting, and access all of bashdag's internals.

  If '-r' is passed, any NODE's dependencies are executed recursively until
  finally NODE's program executed. If no NODE is specified, all programs are
  executed starting from the root nodes.

  Any node that has been visited once will not be visited again to prevent cycles.

Options:
    -f FILE         Load dag configuration from FILE
    -s              Show parsed DAG
    -r              Execute the programs specified for each dag node
    -0              Separate each output record by null byte
    -o TYPE         Set '-s' output as TYPE (text, yaml, json)
    -q              Quiet mode (silence warning messages)
    -h              This screen

Environment variables:
    WALK_DEP_FORWARD=0          Disable walking forward dependencies
    WALK_DEP_INVERSE=0          Disable walking inverse dependencies
    VERBOSE_INDENT=3            The level of indentation in verbose mode.
    SHOWDAG=1                   Enable '-s' option
    RUNDAG=1                    Enable '-r' option
    QUIET=1                     Enable '-q' option
    DEBUG=1                     Enable debug tracing

Config functions:

  dagdep NODE DEPENDENCY
         Define a NODE in the dag as depending on DEPENDENCY.
 
  dagprogram NODE CMD [..]
         Define a program that should be executed for a given dag.
 
  dagrun [NODE ..]
         Recursively execute the programs in the dag starting at NODE.
         If a root node is passed, we can walk it as normal, doing both
         dependencies and inverse dependencies.
         If a non-root node is passed, we need to first walk all the
         inverse dependencies. Then we do *not* walk the forward dependencies
         of the inverse dependencies, but only the forward dependencies of
 
  walkdag [NODE ..]
         Walk the dag from a NODE (or the roots if no NODE specified). Print
         out the DAG in a predefined format type.
