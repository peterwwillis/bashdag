#!/usr/bin/env bash
# bashdag - A DAG in Bash
# Copyright (C) 2022  Peter Willis
VERSION="0.2"
set -eu
[ "${DEBUG:-0}" = "1" ] && set -x

# # Creating a config file
#   Your config file should consist almost entirely of 'dagdep' and 'dagprogram' entries.
#   You can use Bash loops and other methods to programmatically call those two functions.
# 
# # Design
#   Internal functions start with '_', and are not intended to be used from a config file.
# 
#   The internal functions give each element of the DAG an index number and refer
#   to them by their indexes. This enables making arrays dynamically that refer 
#   to specific elements of the DAG without running into naming conflicts (array
#   names have a limited character set).
# 
# ## Internal Objects
# - `dag`: 
#           *associative array*. Mapping of dag name to dag index number.
# - `dag_r`: 
#           *associative array*. Reverse-mapping of index number to dag name
# - `dag_nv`:
#           *associative array*. Keys are "name:dependency", values are '1' if mapping already set in `dag`.
# - `_dag_deps_INDEX`:
#           *array*. The array of dependencies that INDEX depends on. The values are INDEXes.
# - `_dag_inv_deps_INDEX`:
#           *array*. The array of dependencies that depend on INDEX. The values are INDEXes.
# - `_dag_r_attr_NAME_INDEX`: 
#           *array*. A dynamically-created array specific to an attribute NAME and the INDEX of a dag entry.
# 

declare -A dag dag_r dag_nv
declare -a attrs=('walked' 'program') # The NAMEs in _dag_r_attr_NAME_INDEX
declare -i _dag_c=0 # Global INDEX counter (will this roll over on really big DAGs?)

_err () { echo "$0: Error: $*" 1>&2 ; exit 1 ; }
_errecho () { [ "$QUIET" -eq 1 ] || echo "$0: $*" 1>&2 ; }
_verbose () {
    local text i="$1"; shift ; text="$*"
    [ "$i" -gt "0" ] && text="$(printf "(s$i)%$((i*${VERBOSE_INDENT:-3}))s%s" ' ' "$*")"
    [ "$VERBOSE" -eq 0 ] || _errecho "$text"
}

# Usage: _init_dag_name NODE
#        Initialize a new dependency NODE.
_init_dag_name () {
    local name="$1" n
    if [ -z "${dag["$name"]+unset}" ] ; then
        dag["$name"]=$_dag_c
        # shellcheck disable=SC2034
        dag_r[$_dag_c]="$name"
        eval "declare -a _dag_deps_${_dag_c}"
        eval "declare -a _dag_inv_deps_${_dag_c}"
        for n in "${attrs[@]}" ; do
            eval "declare -a _dag_r_attr_${n}_${_dag_c}"
        done
        _dag_c=$((_dag_c+1))
    fi
}

# Usage: _add_dag_dep NODE DEP
#        Add a dependency DEP for NODE (NODE depends on DEP).
_add_dag_dep () {
    local arr name="$1" dep="$2"
    if [ -z "${dag_nv["$name§$dep"]+unset}" ] ; then
        declare -n arr="_dag_deps_${dag["$name"]}"
        dag_nv["$name§$dep"]=1
        arr+=("${dag["$dep"]}")
        # shellcheck disable=SC2178
        declare -n arr="_dag_inv_deps_${dag["$dep"]}"
        arr+=("${dag["$name"]}")
    fi
}

# Usage: dagdep NODE DEPENDENCY
#        Define a NODE in the dag as depending on DEPENDENCY.
dagdep () {
    local name="$1" dep="$2"
    _init_dag_name "$name"
    _init_dag_name "$dep"
    _add_dag_dep "$name" "$dep"
}

# Usage: dagprogram NODE CMD [..]
#        Define a program that should be executed for a given dag.
dagprogram () {
    local arr name="$1" dag_i="${dag["$1"]}" ; shift 1
    _dag_r_attr "program" "$dag_i" "$@"
}

# Usage: _dag_r_attr ATTRIBUTE INDEX [VALUE ..]
#        Retrieve and set attributes in attribute-specific arrays.
#        Pass an attribute name and a a dag index, and optional values.
#        - If optional values are passed, sets an array to the values and returns 0.
#        - If there is no value set, returns 1.
#        - If there is a value set, prints the value and returns 0.
_dag_r_attr () {
    local arr arrname="$1" dag_i="$2"; shift 2
    declare -n arr="_dag_r_attr_${arrname}_${dag_i}"
    if [ $# -lt 1 ] ; then
        [ -n "${arr+unset}" ] || return 1
        printf "%s\n" "${arr[*]}"
    else
        arr=("$@")
    fi
    return 0
}

# Usage: dagrun [NODE ..]
#        Recursively execute the programs in the dag starting at NODE.
#        If a root node is passed, we can walk it as normal, doing both
#        dependencies and inverse dependencies.
#        If a non-root node is passed, we need to first walk all the
#        inverse dependencies. Then we do *not* walk the forward dependencies
#        of the inverse dependencies, but only the forward dependencies of
#        the node we started with.
dagrun () {
    local indexes n i
    declare -a indexes=()
    if [ $# -gt 0 ] ; then
        for n in "$@" ; do
            [ -n "${dag["$n"]+unset}" ] || _err "No such node '$n'"
            indexes+=("${dag["$n"]}")
        done
    else
        _find_dag_root "indexes"
    fi

    RUNDAG=1
    _walkdag_recurse 1 "${indexes[@]}"
}

# Usage: _find_dag_root ARRAYNAME [NODE ..]
#        Find root nodes (nodes that don't have any dependencies) and add their
#        INDEXes to ARRAYNAME. If NODE is passed, checks if NODE is a root, and
#        if it is, adds its INDEX to ARRAYNAME.
_find_dag_root () {
    local arr arr2 name nodes
    declare -n arr2="$1"; shift
    declare -a nodes=()
    nodes=("${!dag[@]}")
    [ $# -lt 1 ] || nodes=("$@")
    for name in "${nodes[@]}" ; do
        [ -n "${dag["$name"]+unset}" ] || _err "No such node '$name'"
        declare -n arr="_dag_deps_${dag["$name"]}"
        if [ -z "${arr+unset}" ] || [ "${#arr[@]}" -lt 1 ] ; then
            arr2+=("${dag["$name"]}")
        fi
    done
}

# Usage: walkdag [NODE ..]
#        Walk the dag from a NODE (or the roots if no NODE specified). Print
#        out the DAG in a predefined format type.
walkdag () {
    local indexes n i
    declare -a indexes=()
    _find_dag_root "indexes" "$@"
    [ "${#indexes[@]}" -gt 0 ] || \
        for n in "$@" ; do indexes+=("${dag["$n"]}") ; done

    _showdag "dag"
    _walkdag_recurse 1 "${indexes[@]}"
    _showdag
}
_walkdag_recurse () {
    local i c="$1"; shift
    for i in "$@" ; do
        _walkdag_one "$c" "$i"
    done
}
_walkdag_one () {
    local arr name="${dag_r["$2"]}" depslist="" program="" d c="$1" i="$2" ; shift 2


    if ! _dag_r_attr "walked" "$i" >/dev/null ; then
        _verbose "$c" "Walking node $name ($i)"
        _dag_r_attr "walked" "$i" 1
    else
        _verbose "$c" "Walking node $name ($i): already walked, skipping"
        return 0
    fi

    # Prepare the output variables and show the dag
    declare -n arr="_dag_deps_$i"
    for d in "${arr[@]}" ; do  depslist="${depslist:+${depslist}, }${dag_r[$d]}" ; done
    if _dag_r_attr "program" "$i" >/dev/null ; then
        # shellcheck disable=SC2178
        declare -n arr="_dag_r_attr_program_$i"
        program="${arr[*]}"
    fi
    _showdag "$name" "$i" "$depslist" "$program"

    if [ $RUNDAG -eq 1 ] ; then
        if _dag_r_attr "program" "$i" >/dev/null ; then
            declare -n arr="_dag_r_attr_program_$i"
            _verbose "$c" "Running program for node $name: '${arr[*]}'"
            # shellcheck disable=SC2068
            bash -c "${arr[@]}"
        fi
        _verbose "$c" "Finished node run '$name'"
    fi

    # First, recursively execute anything that this node depends on
    if [ "${WALK_DEP_FORWARD:-1}" = "1" ] ; then
        declare -n arr="_dag_deps_$i"
        if [ -n "${arr+unset}" ] ; then
            _verbose "$c" "Beginning walking dependencies for node $name (${arr[*]})"
            _walkdag_recurse "$((c+1))" "${arr[@]}"
            _verbose "$c" "Finished walking dependencies for node $name"
        fi
    fi

    # Last, recursively execute anything that depends on this node
    if [ "${WALK_DEP_INVERSE:-1}" = "1" ] ; then
        declare -n arr="_dag_inv_deps_$i"
        if [ -n "${arr+unset}" ] ; then
            _verbose "$c" "Beginning walking inverse dependencies for node $name (${arr[*]})"
            _walkdag_recurse "$((c+1))" "${arr[@]}"
            _verbose "$c" "Finished walking inverse dependencies for node $name"
        fi
    fi
}

_showdag () {
    [ "$SHOWDAG" -eq 1 ] || return 0
    "_showdag_$outtype" "$@"
}
_showdag_text () {
    [ $# -gt 1 ] || return 0
    local name="$1" i="$2" depslist="$3" program="$4"
    printf "%s$newline" "# $name ($i):"
    [ -n "${depslist:-}" ] && printf "%s$newline" "#     dependencies: $depslist"
    [ -n "${program:-}" ] && printf "%s$newline" "#     program:" && printf "%s$newline" "$program" | sed -e 's/^/#         /g'
}
_showdag_yaml () {
    local name i depslist program arr2
    if [ $# -eq 0 ] ; then
        return 0
    elif [ $# -eq 1 ] ; then
        name="$1"; shift
        printf "%s$newline"  "--- # dag"
        printf "%s$newline"  "$name:"
        return 0
    elif [ $# -gt 1 ] ; then
        name="$1" i="$2" depslist="$3" program="$4"; shift 4
    fi
    printf "%s$newline"  "  - $name:"
    printf "%s$newline"  "      index: $i"
    if [ -n "${depslist:-}" ] ; then
        depslist="$(printf "%s\n" "$depslist" | sed -E 's/(,?\s+?)([^,]+)/\1"\2"/g')"
        printf "%s$newline"  "      dependencies: [ $depslist ]"
    fi
    if [ -n "${program:-}" ] ; then
        printf "%s$newline"  "      program: |-"
        declare -n arr2="_dag_r_attr_program_${i}"
        printf "%s\n" "${arr2[@]}" | sed -e "s/^/        /g"
    fi
}
_showdag_json () {
    local name i depslist program arr2
    if [ $# -eq 1 ] ; then
        name="$1"; shift
        printf "%s$newline" "{"
        printf "%s$newline" "\"$name\": ["
        return 0
    elif [ $# -eq 0 ] ; then
        printf "%s$newline" "    ]"
        printf "%s$newline" "}"
        unset _showdag_json_firstline
        return 0
    elif [ $# -gt 1 ] ; then
        name="$1" i="$2" depslist="$3" program="$4"; shift 4
        depslist="$(printf "%s\n" "$depslist" | sed -E 's/(,?\s+?)([^,]+)/\1"\2"/g')"
    fi
    printf "%s" "      ${_showdag_json_firstline:+,}{ \"$name\": {"
    printf "%s" " \"index\": $i"
    if [ -n "${depslist:-}" ] ; then
        printf "%s" ", \"dependencies\": [ $depslist ]"
    fi
    if [ -n "${program:-}" ] ; then
        declare -n arr2="_dag_r_attr_program_${i}"
        printf "%s" ", \"program\": \"$(_json_fmt_str "${arr2[@]}")\""
    fi
    printf "%s$newline" " } }"
    _showdag_json_firstline=1
}
_json_fmt_str () {
    local str="$1"
    str=${str//\\/\\\\} # \ 
    str=${str//\//\\\/} # / 
    str=${str//\'/\\\'} # ' (not strictly needed ?)
    str=${str//\"/\\\"} # " 
    str=${str//	/\\t} # \t (tab)
    str=${str//
/\\\n} # \n (newline)
    str=${str//^M/\\\r} # \r (carriage return)
    str=${str//^L/\\\f} # \f (form feed)
    str=${str//^H/\\\b} # \b (backspace)
    printf "%s\n" "$str"
}

_load_conf () {
    for f in "$@" ; do
        eval "$(cat "$f")"
    done
}

_usage () {
    cat <<EOUSAGE
bashdag v$VERSION

Usage: $0 [OPTIONS] [NODE ..]

  Based on a config file, create a Directed Acyclic Graph and do stuff with it.
  Primarily used to execute programs according to the DAG sequence.

  Pass a NODE to begin walking the DAG starting at NODE. If no NODE is specified,
  the root nodes will be used (nodes that are depended on but themselves have no
  dependencies).

  Config file is a Bash script that gets eval'd into the main script. You can use
  functions to create and modify the DAG, create the DAG programmatically using 
  Bash scripting, and access all of bashdag's internals.

  If '-r' is passed, any NODE's dependencies are executed recursively until
  finally NODE's program executed. If no NODE is specified, all programs are
  executed starting from the root nodes.

  Any node that has been visited once will not be visited again to prevent cycles.

Options:
    -f FILE         Load dag configuration from FILE
    -s              Show parsed DAG
    -r              Execute the programs specified for each dag node
    -0              Separate each output record by null byte
    -o TYPE         Set '-s' output as TYPE (text, yaml, json)
    -q              Quiet mode (silence warning messages)
    -h              This screen

Environment variables:
    WALK_DEP_FORWARD=0          Disable walking forward dependencies
    WALK_DEP_INVERSE=0          Disable walking inverse dependencies
    VERBOSE_INDENT=3            The level of indentation in verbose mode.
    SHOWDAG=1                   Enable '-s' option
    RUNDAG=1                    Enable '-r' option
    QUIET=1                     Enable '-q' option
    DEBUG=1                     Enable debug tracing

Config functions:

EOUSAGE
    grep -A6 -e '^# Usage: [^_]' "$0" | grep -v '^[^#-]\|^$' | sed -E 's/^(#|--)/ /; s/Usage: //'
    exit "$failurecode"
}

declare -a dagconfs=()
newline="\n" outtype="text" failurecode=1
SHOWDAG=${SHOWDAG:-0} RUNDAG=${RUNDAG:-0} QUIET=${QUIET:-0} VERBOSE=${VERBOSE:-0}
while getopts "f:sr0o:qvh" args ; do
    case "$args" in
        f)      dagconfs+=("$OPTARG") ;;
        s)      SHOWDAG=1 ;;
        r)      RUNDAG=1 ;;
        0)      newline="\0" ;;
        o)      outtype="$OPTARG" ;;
        q)      QUIET=1 ;;
        v)      VERBOSE=1 ;;
        h)      failurecode=0 _usage ;;
        *)      _err "unknown option '$args'" ;;
    esac
done
shift $((OPTIND-1))

[ "${#dagconfs[*]}" -lt 1 ] && _usage
_load_conf "${dagconfs[@]}"

if [ $SHOWDAG -eq 1 ] ; then
    walkdag "$@"
elif [ $RUNDAG -eq 1 ] ; then
    dagrun "$@"
else
    _usage
fi
